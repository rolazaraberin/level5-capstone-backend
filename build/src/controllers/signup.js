"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const database_1=require("../models/database"),utilityFunctions_1=require("../utils/utilityFunctions"),nodeUtils_1=require("../utils/nodeUtils"),sendEmail_1=__importDefault(require("./sendEmail")),dbToken_1=__importDefault(require("./dbToken")),Login_1=__importDefault(require("../models/entities/Login")),User_1=__importDefault(require("../models/entities/User")),dotenv_1=__importDefault(require("dotenv")),signup={withPassword:withPassword};exports.default=signup,dotenv_1.default.config();const disableEmails=process.env.disableEmails;function withPassword(request,response,_next){return __awaiter(this,void 0,void 0,(function*(){try{const{email:email,password:password}=request.body;yield validate(email),yield database_1.typeorm.transaction((function(manager){return __awaiter(this,void 0,void 0,(function*(){const user=createAccount(email),data=yield manager.insert(User_1.default,user);user.id=data.raw[0].id;const login=yield createLogin(email,password,user),token=dbToken_1.default.getNew(email);login.token=token,yield manager.insert(Login_1.default,login);const authInfo={email:email,token:token};response.status(200).send(authInfo)}))})),"true"!==disableEmails&&sendEmail_1.default.signupConfirmation(email)}catch(_error){const error=yield _error,message=error.message,code=error.code||400;response.status(code).send(message)}}))}function validate(email){return __awaiter(this,void 0,void 0,(function*(){const emailHash=undefined,columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email)},data=yield database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues});if((0,utilityFunctions_1.isEmpty)(data))return"Email validated";{const error=new Error("ERROR: Account already exists");throw error.code=409,error}}))}function createLogin(email,password,user){return __awaiter(this,void 0,void 0,(function*(){const emailHash=(0,nodeUtils_1.hash)(email),passwordHash=(0,nodeUtils_1.hash)(password),login=new Login_1.default;return login.emailHash=emailHash,login.passwordHash=passwordHash,login.user=user,login}))}function createAccount(email){const user=new User_1.default;return user.email=email,user}