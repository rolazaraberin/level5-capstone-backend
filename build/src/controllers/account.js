"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const nodeUtils_1=require("../utils/nodeUtils"),database_1=require("../models/database"),authenticate_1=__importDefault(require("./authenticate")),httpCodes_1=__importDefault(require("../utils/httpCodes")),sendEmail_1=__importDefault(require("./sendEmail")),User_1=__importDefault(require("../models/entities/User")),Login_1=__importDefault(require("../models/entities/Login")),dotenv_1=__importDefault(require("dotenv")),cartUtils_1=require("./cartUtils"),userUtils_1=require("./userUtils"),account={fetchInfo:fetchInfo,delete:_delete};exports.default=account,dotenv_1.default.config();const disableEmails=process.env.disableEmails;function fetchInfo(request,response){return __awaiter(this,void 0,void 0,(function*(){try{const{email:email,token:token}=request.body,userID=yield authenticate_1.default.token(email,token),account=yield getAccountInfo(userID);if(!account)return response.status(401).send("ERROR: Cannot retrieve account");response.status(200).send(account)}catch(asyncError){handleAsyncError(asyncError,response)}}))}function getAccountInfo(userID){return __awaiter(this,void 0,void 0,(function*(){try{const account=yield(0,userUtils_1.getUserById)(userID);return account.cart=yield(0,cartUtils_1.getCartById)(account.cartID),account}catch(error){}}))}function _delete(request,response){return __awaiter(this,void 0,void 0,(function*(){try{const{email:email,password:password}=request.body,{userID:userID}=yield authenticate_1.default.password(email,password);yield deleteLogin(email),yield deleteUser(userID),response.status(200).send("SUCCESS: Account deleted"),"true"!==disableEmails&&sendEmail_1.default.deleteConfirmation(email)}catch(asyncError){const error=yield asyncError;let message=error.message,code=error.code||httpCodes_1.default.error.general;code===httpCodes_1.default.error.unauthenticated&&(message="ERROR: Incorrect password"),response.status(code).send(message)}}))}function deleteUser(userID){return __awaiter(this,void 0,void 0,(function*(){const data=undefined;return yield database_1.typeorm.getRepository(User_1.default).delete(userID)}))}function deleteLogin(email){return __awaiter(this,void 0,void 0,(function*(){const emailHash=undefined,columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email)},data=undefined;return yield database_1.typeorm.getRepository(Login_1.default).delete(columnsMatchValues)}))}function handleAsyncError(asyncError,response){return __awaiter(this,void 0,void 0,(function*(){const error=yield asyncError,message=error.message,code=error.code||httpCodes_1.default.error.general;response.status(code).send(message)}))}