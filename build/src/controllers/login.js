"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const authenticate_1=__importDefault(require("./authenticate")),dbToken_1=__importDefault(require("./dbToken")),httpCodes_1=__importDefault(require("../utils/httpCodes")),router_1=require("../routes/router"),login={withToken:withToken,withPassword:withPassword};function withToken(request,response,next){return __awaiter(this,void 0,void 0,(function*(){const{email:email,token:token}=request.body;if(!token)return next();try{const userID=void 0;if(!(yield authenticate_1.default.token(email,token)))return response.status(401).send("ERROR: Incorrect email or password");const authInfo={email:email,token:token,isTemporary:!1};response.status(200).send(authInfo)}catch(asyncError){const{code:code,message:message}=yield(0,router_1.handleAsyncError)(asyncError);response.status(code).send(message)}}))}function withPassword(request,response){return __awaiter(this,void 0,void 0,(function*(){const{email:email,password:password}=request.body;try{const{userID:userID,token:token}=yield authenticate_1.default.password(email,password);if(!userID)return response.status(401).send("ERROR: Incorrect email or password");const authInfo={email:email,token:token,isTemporary:!1};token||(authInfo.token=dbToken_1.default.getNew(email),yield dbToken_1.default.save(email,authInfo.token)),response.status(200).send(authInfo)}catch(asyncError){const error=yield asyncError,message=error.message;let code=error.code||httpCodes_1.default.error.general;(code>=600||"string"==typeof code)&&(code=httpCodes_1.default.error.serverError),response.status(code).send(message)}}))}exports.default=login;