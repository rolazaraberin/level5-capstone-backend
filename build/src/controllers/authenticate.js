"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const httpCodes_1=__importDefault(require("../utils/httpCodes")),database_1=require("../models/database"),nodeUtils_1=require("../utils/nodeUtils"),utilityFunctions_1=require("../utils/utilityFunctions"),Login_1=__importDefault(require("../models/entities/Login")),authenticate={password:password,token:token,email:email,itemsTable:itemsTable};function password(email,password){return __awaiter(this,void 0,void 0,(function*(){if(!email||!password){const error=new Error("ERROR: email and password must be provided");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=undefined,passwordHash=undefined,columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email),passwordHash:(0,nodeUtils_1.hash)(password)},data=yield database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues,relations:{user:!0}}),userID=data.user.id,token=data.token;if(null===userID){const error=new Error("ERROR: Incorrect email or password");throw error.code=httpCodes_1.default.error.unauthenticated,error}return{userID:userID,token:token}}))}function token(email,token){var _a;return __awaiter(this,void 0,void 0,(function*(){if((0,utilityFunctions_1.isEmpty)(email)||(0,utilityFunctions_1.isEmpty)(token)){const error=new Error("ERROR: email and password must be provided");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=(0,nodeUtils_1.hash)(email);if(!emailHash){const error=new Error("ERROR: Invalid email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}const columnsMatchValues={emailHash:emailHash,token:token},data=yield database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues,relations:{user:!0}}),userID=null===(_a=null==data?void 0:data.user)||void 0===_a?void 0:_a.id;if(!userID){const error=new Error("ERROR: Invalid email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}return userID}))}function email(email){return __awaiter(this,void 0,void 0,(function*(){const hashedEmail=(0,nodeUtils_1.hash)(email),authenticateEmailHash=emailHash;yield authenticateEmailHash(hashedEmail)}))}function emailHash(emailHash){return __awaiter(this,void 0,void 0,(function*(){const columnsMatchValues={emailHash:emailHash},data=yield database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues});if((0,utilityFunctions_1.isEmpty)(data)){const error=new Error("ERROR: Account does not exist");throw error.code=httpCodes_1.default.error.unauthenticated,error}return"Email validated"}))}function itemsTable(tableId){return __awaiter(this,void 0,void 0,(function*(){const hashedEmail=tableId,authenticateEmailHash=emailHash;yield authenticateEmailHash(hashedEmail)}))}exports.default=authenticate;