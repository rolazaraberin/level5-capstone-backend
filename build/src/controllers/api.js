"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const httpCodes_1=__importDefault(require("../utils/httpCodes")),database_1=require("../models/database"),Login_1=__importDefault(require("../models/entities/Login")),api={ping:ping};function ping(request,response){return __awaiter(this,void 0,void 0,(function*(){try{yield database_1.typeorm.getRepository(Login_1.default).findOneBy({emailHash:""}),response.send("API ready")}catch(asyncError){const error=yield asyncError;error.message="ERROR: API not ready. Try again.";const code=httpCodes_1.default.error.serverError;response.status(code).send(error)}}))}exports.default=api;