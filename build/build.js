var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},Terser=require("terser"),fs=require("fs"),path=require("path");const terserOptions={mangle:!1,keep_classnames:!0,keep_fnames:!0,compress:{defaults:!0,unused:!1}};function getAllFiles(dirPath,arrayOfFiles=[]){let files;return fs.readdirSync(dirPath).forEach((function(file){fs.statSync(dirPath+"/"+file).isDirectory()?arrayOfFiles=getAllFiles(dirPath+"/"+file,arrayOfFiles):arrayOfFiles.push(path.join(__dirname,dirPath,"/",file))})),arrayOfFiles.filter((path=>path.match(/\.js$/)))}function minifyFiles(filePaths){filePaths.forEach((filePath=>__awaiter(this,void 0,void 0,(function*(){const data=fs.readFileSync(filePath,"utf8"),minified=yield Terser.minify(data,terserOptions);fs.writeFileSync(filePath,minified.code)}))))}const files=getAllFiles("./build");minifyFiles(files);